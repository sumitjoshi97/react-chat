{"version":3,"sources":["views/UserLogin/index.jsx","components/Dialog/index.jsx","components/Header/index.jsx","components/RoomsList/Room.jsx","components/Scrollbar/index.jsx","components/RoomsList/index.jsx","components/MembersList/Member.jsx","components/MembersList/index.jsx","components/MessageList/Message.jsx","components/MessageList/index.jsx","components/TypingIndicator/index.jsx","components/SendMessageForm/index.jsx","components/Setting/index.jsx","utils/theme.js","views/ChatScreen/index.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["UserLogin","state","username","onChange","e","_this","setState","target","value","onSubmit","preventDefault","trim","length","props","react_default","a","createElement","className","this","type","placeholder","Component","Dialog","text","onInputChange","toggleDialog","theme","styles","dialogStyles","background","secondaryBackground","color","fontPrimary","inputStyles","tertiaryBackground","buttonStyles","primaryBackground","style","onClick","concat","name","Header","_ref","toggleSettings","headerStyles","Room","_this$props","isCurrentRoom","selectionColor","roomStyles",":hover","hoverColor","currentRoomStyles","roomStyle","Object","objectSpread","setCurrentRoom","roomName","PureComponent","Radium","Scrollbar","renderThumb","thumbStyle","backgroundColor","thumbColor","borderRadius","marginRight","lib_default","renderThumbVertical","autoHide","autoHideTimeout","autoHideDuration","children","RoomsList","renderRooms","rooms","map","room","RoomsList_Room","key","id","currentRoom","_this2","listStyles","Scrollbar_Scrollbar","Member","memberOnlineColor","memberOfflineColor","memberName","presenceStyle","memberPresence","MembersList","renderMembers","members","member","Member_Member","presence","memberOffline","memberOnline","Message","messageSender","messageText","senderStyle","messageStyle","MessageList","UNSAFE_componentWillUpdate","node","ReactDOM","findDOMNode","assertThisInitialized","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","componentDidUpdate","renderMessages","messages","message","Message_Message","senderId","fontSecondary","TypingIndicator","usersWhoAreTyping","indicator","SendMessageForm","Setting","_Component","_getPrototypeOf2","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","setTheme","inherits","createClass","DARK_THEME","LIGHT_BLUE_THEME","LIGHT_RED_THEME","ChatScreen","currentUser","isDialogActive","dialogName","isSettingActive","currentTheme","subscribeUserToRoom","user","roomId","subscribeToRoom","messageLimit","hooks","onMessage","toConsumableArray","onUserStartedTyping","onUserStoppedTyping","filter","onPresenceChange","forceUpdate","onUserJoined","sendMessage","sendTypingEvent","isTypingIn","catch","error","console","addRoom","createRoom","then","log","fetchMessagesForCurrentRoom","err","addMemberToRoom","_this$state","addUserToRoom","userId","find","fetchMessages","limit","undefined","prevState","Chatkit","ChatManager","instanceLocator","process","currentUsername","tokenProvider","TokenProvider","url","connect","onAddedToRoom","_this$state2","THEME","dialog","Dialog_Dialog","components_Setting","Fragment","components_Header","RoomsList_RoomsList","MessageList_MessageList","components_TypingIndicator","SendMessageForm_SendMessageForm","MembersList_MembersList","users","App","currentScreen","onUsernameSubmit","fetch","method","headers","Content-Type","body","JSON","stringify","response","ChatScreen_ChatScreen","UserLogin_UserLogin","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbaa7171.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './styles.css'\r\n\r\nexport default class UserLogin extends Component {\r\n  state = {\r\n    username: ''\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ username: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    const { username } = this.state\r\n    e.preventDefault()\r\n\r\n    if (username.trim().length > 0) {\r\n      this.props.onSubmit(this.state.username)\r\n      this.setState({ username: '' })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='user-login'>\r\n        <form onSubmit={this.onSubmit} className='login-form'>\r\n          <h1 className='header'>Login</h1>\r\n          <input\r\n            type='text'\r\n            placeholder='What is your name??'\r\n            onChange={this.onChange}\r\n            className='input'\r\n          />\r\n          <input type='submit' className='input button' />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './styles.css'\r\n\r\nexport default class Dialog extends Component {\r\n  static propTypes = {\r\n    toggleDialog: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    theme: PropTypes.object.isRequired\r\n  }\r\n\r\n  state = {\r\n    text: ''\r\n  }\r\n\r\n  onInputChange = e => {\r\n    this.setState({ text: e.target.value })\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n    this.props.onSubmit(this.state.text)\r\n    this.props.toggleDialog()\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n\r\n    const styles = {\r\n      dialogStyles: {\r\n        background: theme.secondaryBackground,\r\n        color: theme.fontPrimary\r\n      },\r\n      inputStyles: {\r\n        background: theme.tertiaryBackground,\r\n        color: theme.fontPrimary\r\n      },\r\n      buttonStyles: {\r\n        background: theme.primaryBackground,\r\n        color: theme.fontPrimary\r\n      }\r\n    }\r\n    return (\r\n      <div className='main'>\r\n        <form\r\n          onSubmit={this.onSubmit}\r\n          className='dialog-form'\r\n          style={styles.dialogStyles}\r\n        >\r\n          <button onClick={this.props.toggleDialog} className='cancel'>\r\n            x\r\n          </button>\r\n          <h1 className='header'>{`Add new ${this.props.name}`}</h1>\r\n          <input\r\n            type='text'\r\n            placeholder='Type here..'\r\n            onChange={this.onInputChange}\r\n            className='input'\r\n            style={styles.inputStyles}\r\n          />\r\n          <input\r\n            type='submit'\r\n            className='input button'\r\n            style={styles.buttonStyles}\r\n            value='Add'\r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './styles.css'\r\n\r\nconst Header = ({ toggleSettings, theme }) => {\r\n  const headerStyles = {\r\n    background: theme.primaryBackground,\r\n    color: theme.fontPrimary\r\n  }\r\n\r\n  return (\r\n    <div className='app-header' style={headerStyles}>\r\n      <div className='app-name'>#react-CHAT</div>\r\n      <button\r\n        className='settings-header'\r\n        style={{ color: theme.fontPrimary }}\r\n        onClick={toggleSettings}\r\n      >\r\n        settings\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Radium from 'radium'\r\n\r\nclass Room extends PureComponent {\r\n  static propTypes = {\r\n    roomName: PropTypes.string,\r\n    selectionColor: PropTypes.string.isRequired,\r\n    hoverColor: PropTypes.string.isRequired\r\n  }\r\n\r\n  render() {\r\n    const { isCurrentRoom, selectionColor, hoverColor } = this.props\r\n\r\n    const styles = {\r\n      roomStyles: {\r\n        ':hover': {\r\n          background: hoverColor\r\n        }\r\n      },\r\n      currentRoomStyles: {\r\n        background: selectionColor\r\n      }\r\n    }\r\n\r\n    const roomStyle = isCurrentRoom\r\n      ? { ...styles.roomStyles, ...styles.currentRoomStyles }\r\n      : styles.roomStyles\r\n\r\n    return (\r\n      <li\r\n        className='list-item'\r\n        style={roomStyle}\r\n        onClick={this.props.setCurrentRoom}\r\n      >\r\n        {this.props.roomName}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Radium(Room)\r\n","import React, { Component } from 'react'\r\nimport Scrollbars from 'react-custom-scrollbars'\r\n\r\nexport default class Scrollbar extends Component {\r\n  renderThumb = ({ style }) => {\r\n    const thumbStyle = {\r\n      backgroundColor: this.props.thumbColor,\r\n      borderRadius: '5px',\r\n      marginRight: '5px'\r\n    }\r\n    return <div style={{ ...style, ...thumbStyle }} />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Scrollbars\r\n        renderThumbVertical={this.renderThumb}\r\n        autoHide={this.props.autoHide}\r\n        autoHideTimeout={1000}\r\n        autoHideDuration={400}\r\n      >\r\n        {this.props.children}\r\n      </Scrollbars>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Room from './Room'\r\nimport Scrollbar from '../Scrollbar'\r\n\r\nexport default class RoomsList extends Component {\r\n  static propTypes = {\r\n    theme: PropTypes.object.isRequired\r\n  }\r\n\r\n  renderRooms = () => {\r\n    const { rooms, theme } = this.props\r\n    if (rooms) {\r\n      return this.props.rooms.map(room => (\r\n        <Room\r\n          key={room.id}\r\n          roomName={room.name}\r\n          isCurrentRoom={this.props.currentRoom.id === room.id}\r\n          setCurrentRoom={() => this.props.setCurrentRoom(room.id)}\r\n          selectionColor={theme.secondaryBackground}\r\n          hoverColor={theme.tertiaryBackground}\r\n        />\r\n      ))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n\r\n    const styles = {\r\n      listStyles: {\r\n        background: theme.primaryBackground,\r\n        color: theme.fontPrimary\r\n      },\r\n      buttonStyles: {\r\n        background: theme.secondaryBackground,\r\n        color: theme.fontPrimary\r\n      }\r\n    }\r\n    return (\r\n      <div className='column' style={styles.listStyles}>\r\n        <div className='list-header'>Your Rooms</div>\r\n        <ul className='list'>\r\n          <Scrollbar thumbColor={theme.secondaryBackground} autoHide>\r\n            {this.renderRooms()}\r\n          </Scrollbar>\r\n        </ul>\r\n        <button\r\n          className='add-btn'\r\n          style={styles.buttonStyles}\r\n          onClick={() => this.props.toggleDialog('room')}\r\n        >\r\n          create Room\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Member extends PureComponent {\r\n  static propTypes = {\r\n    memberName: PropTypes.string.isRequired,\r\n    memberOfflineColor: PropTypes.string.isRequired,\r\n    memberOnlineColor: PropTypes.string.isRequired\r\n  }\r\n\r\n  render() {\r\n    const { memberOnlineColor, memberOfflineColor, memberName } = this.props\r\n    const presenceStyle =\r\n      this.props.memberPresence.state === 'online'\r\n        ? { background: memberOnlineColor }\r\n        : { background: memberOfflineColor }\r\n    return (\r\n      <li className='list-item'>\r\n        <span className='presence' style={presenceStyle} />\r\n        {memberName}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Member from './Member'\r\nimport Scrollbar from '../Scrollbar'\r\n\r\nexport default class MembersList extends Component {\r\n  static propTypes = {\r\n    members: PropTypes.array,\r\n    toggleDialog: PropTypes.func.isRequired,\r\n    theme: PropTypes.object.isRequired\r\n  }\r\n\r\n  renderMembers = () => {\r\n    const { members, theme } = this.props\r\n    if (members) {\r\n      return this.props.members.map(member => (\r\n        <Member\r\n          key={member.id}\r\n          memberName={member.name}\r\n          memberPresence={member.presence}\r\n          memberOfflineColor={theme.memberOffline}\r\n          memberOnlineColor={theme.memberOnline}\r\n        />\r\n      ))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n\r\n    const styles = {\r\n      listStyles: {\r\n        background: theme.primaryBackground,\r\n        color: theme.fontPrimary\r\n      },\r\n      buttonStyles: {\r\n        background: theme.secondaryBackground,\r\n        color: theme.fontPrimary\r\n      }\r\n    }\r\n    return (\r\n      <div className='column' style={styles.listStyles}>\r\n        <div className='list-header'>Members list</div>\r\n        <ul className='list'>\r\n          <Scrollbar thumbColor={theme.secondaryBackground} autoHide>\r\n            {this.renderMembers()}\r\n          </Scrollbar>\r\n        </ul>\r\n        <button\r\n          className='add-btn'\r\n          style={styles.buttonStyles}\r\n          onClick={() => this.props.toggleDialog('member to room')}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Message extends PureComponent {\r\n  static propTypes = {\r\n    messageSender: PropTypes.string,\r\n    messageText: PropTypes.string\r\n  }\r\n\r\n  render() {\r\n    const { messageSender, messageText } = this.props\r\n\r\n    return (\r\n      <li className='message'>\r\n        <span\r\n          className='message-sender'\r\n          style={{ color: this.props.senderStyle }}\r\n        >\r\n          {messageSender}\r\n        </span>\r\n        <p className='message-text' style={{ color: this.props.messageStyle }}>\r\n          {messageText}\r\n        </p>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Message from './Message'\r\nimport Scrollbar from '../Scrollbar'\r\nimport './styles.css'\r\n\r\nexport default class MessageList extends Component {\r\n  static propTypes = {\r\n    messages: PropTypes.array,\r\n    theme: PropTypes.object.isRequired\r\n  }\r\n\r\n  UNSAFE_componentWillUpdate = () => {\r\n    const node = ReactDOM.findDOMNode(this)\r\n    this.shouldScrollToBottom =\r\n      node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    const node = ReactDOM.findDOMNode(this)\r\n    node.scrollTop = node.scrollHeight\r\n  }\r\n\r\n  renderMessages = () => {\r\n    const { messages, theme } = this.props\r\n\r\n    return messages.map(message => (\r\n      <Message\r\n        key={message.id}\r\n        messageSender={message.senderId}\r\n        messageText={message.text}\r\n        senderStyle={theme.fontSecondary}\r\n        messageStyle={theme.fontPrimary}\r\n      />\r\n    ))\r\n  }\r\n  render() {\r\n    return (\r\n      <ul className='message-list'>\r\n        <Scrollbar thumbColor={this.props.theme.primaryBackground}>\r\n          {this.renderMessages()}\r\n        </Scrollbar>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst TypingIndicator = ({ usersWhoAreTyping }) => {\r\n  const indicator =\r\n    usersWhoAreTyping.length > 0\r\n      ? usersWhoAreTyping.length > 1\r\n        ? `${usersWhoAreTyping[0]} and ${usersWhoAreTyping[1]},... are typing`\r\n        : `${usersWhoAreTyping[0]} is typing`\r\n      : null\r\n\r\n  return <p className='typing-indicator'>{indicator}</p>\r\n}\r\n\r\nexport default TypingIndicator\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\nexport default class SendMessageForm extends Component {\r\n  static propTypes = {\r\n    onChange: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n  }\r\n\r\n  state = {\r\n    text: ''\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ text: e.target.value })\r\n    if (this.props.onChange) {\r\n      this.props.onChange()\r\n    }\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n    this.props.onSubmit(this.state.text)\r\n    this.setState({ text: '' })\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n\r\n    const styles = {\r\n      inputStyles: {\r\n        background: theme.tertiaryBackground,\r\n        color: theme.fontPrimary\r\n      },\r\n      buttonStyles: {\r\n        background: theme.primaryBackground,\r\n        color: theme.fontPrimary\r\n      }\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={this.onSubmit} className='message-form'>\r\n        <input\r\n          type='text'\r\n          placeholder='Enter message to send..'\r\n          onChange={this.onChange}\r\n          value={this.state.text}\r\n          className='message-input'\r\n          style={styles.inputStyles}\r\n        />\r\n        <input\r\n          type='submit'\r\n          className='message-send button'\r\n          style={styles.buttonStyles}\r\n          value='send..'\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './styles.css'\r\n\r\nexport class Setting extends Component {\r\n  static propTypes = {\r\n    setTheme: PropTypes.func.isRequired\r\n  }\r\n\r\n  onClick = theme => {\r\n    this.props.setTheme(theme)\r\n    this.props.toggleSettings()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='settings'>\r\n        <div className='cancel' onClick={this.props.toggleSettings}>\r\n          x\r\n        </div>\r\n        <h2 className='header'>Select a theme</h2>\r\n        <div className='themes'>\r\n          <div\r\n            className='theme-box dark'\r\n            onClick={() => this.onClick('dark')}\r\n          />\r\n          <div\r\n            className='theme-box blue'\r\n            onClick={() => this.onClick('blue')}\r\n          />\r\n          <div className='theme-box red' onClick={() => this.onClick('red')} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Setting\r\n","const DARK_THEME = {\r\n  primaryBackground: '#181b1f',\r\n  secondaryBackground: '#2c2f33',\r\n  tertiaryBackground: '#21252b',\r\n  fontPrimary: '#fff',\r\n  fontSecondary: '#adadad',\r\n  memberOnline: '#2e2',\r\n  memberOffline: '#2e2e2e'\r\n}\r\n\r\nconst LIGHT_BLUE_THEME = {\r\n  primaryBackground: '#80b7f5',\r\n  secondaryBackground: '#e6e6e6',\r\n  tertiaryBackground: '#dbdbdb',\r\n  fontPrimary: '#000',\r\n  fontSecondary: '#30373f',\r\n  memberOnline: '#227093',\r\n  memberOffline: '#d2dae2'\r\n}\r\n\r\nconst LIGHT_RED_THEME = {\r\n  primaryBackground: '#ff7979',\r\n  secondaryBackground: '#e6e6e6',\r\n  tertiaryBackground: '#dbdbdb',\r\n  fontPrimary: '#000',\r\n  fontSecondary: '#30373f',\r\n  memberOnline: '#b33939',\r\n  memberOffline: '#d2dae2'\r\n}\r\n\r\nexport { DARK_THEME, LIGHT_BLUE_THEME, LIGHT_RED_THEME }\r\n","import React, { Component } from 'react'\r\nimport Chatkit from '@pusher/chatkit-client'\r\n\r\nimport Dialog from '../../components/Dialog'\r\nimport Header from '../../components/Header'\r\nimport RoomsList from '../../components/RoomsList'\r\nimport MembersList from '../../components/MembersList'\r\nimport Messagelist from '../../components/MessageList'\r\nimport TypingIndicator from '../../components/TypingIndicator'\r\nimport SendMessageForm from '../../components/SendMessageForm'\r\nimport Setting from '../../components/Setting'\r\nimport * as THEME from '../../utils/theme'\r\nimport './styles.css'\r\n\r\nexport default class ChatScreen extends Component {\r\n  state = {\r\n    currentUser: {},\r\n    currentRoom: {},\r\n    messages: [],\r\n    usersWhoAreTyping: [],\r\n    isDialogActive: false,\r\n    dialogName: '',\r\n    isSettingActive: false,\r\n    currentTheme: 'blue'\r\n  }\r\n\r\n  componentDidMount() {\r\n    const chatManager = new Chatkit.ChatManager({\r\n      instanceLocator: process.env.REACT_APP_CHATKIT_INSTANCE,\r\n      userId: this.props.currentUsername,\r\n      tokenProvider: new Chatkit.TokenProvider({\r\n        url: `${process.env.REACT_APP_SERVER_URI}/auth`\r\n      })\r\n    })\r\n\r\n    chatManager\r\n      .connect({\r\n        onAddedToRoom: room => this.forceUpdate()\r\n      })\r\n      .then(currentUser => {\r\n        this.setState({ currentUser })\r\n\r\n        if (currentUser.rooms.length > 0) {\r\n          return currentUser.rooms.map(room =>\r\n            this.subscribeUserToRoom(currentUser, room.id)\r\n          )\r\n        } else {\r\n          return this.subscribeUserToRoom(\r\n            currentUser,\r\n            process.env.REACT_APP_GENERAL_ROOM_ID\r\n          ) //subscribe to general room for first time user\r\n        }\r\n      })\r\n      .then(() => {\r\n        const currentRoom = this.state.currentUser.rooms[0]\r\n        this.setState({ currentRoom })\r\n      })\r\n      .then(() => {\r\n        return this.fetchMessagesForCurrentRoom(this.state.currentRoom)\r\n      })\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  subscribeUserToRoom = (user, roomId) => {\r\n    return user.subscribeToRoom({\r\n      roomId,\r\n      messageLimit: 30,\r\n      hooks: {\r\n        onMessage: message => {\r\n          this.setState({\r\n            messages: [...this.state.messages, message]\r\n          })\r\n        },\r\n        onUserStartedTyping: user => {\r\n          this.setState({\r\n            usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name]\r\n          })\r\n        },\r\n        onUserStoppedTyping: user => {\r\n          this.setState({\r\n            usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\r\n              username => username !== user.name\r\n            )\r\n          })\r\n        },\r\n        onPresenceChange: () => this.forceUpdate(),\r\n        onUserJoined: () => this.forceUpdate()\r\n      }\r\n    })\r\n  }\r\n\r\n  sendMessage = text => {\r\n    this.state.currentUser.sendMessage({\r\n      text,\r\n      roomId: this.state.currentRoom.id\r\n    })\r\n  }\r\n\r\n  sendTypingEvent = () => {\r\n    this.state.currentUser\r\n      .isTypingIn({ roomId: this.state.currentRoom.id })\r\n      .catch(error => console.error('error', error))\r\n  }\r\n\r\n  addRoom = name => {\r\n    this.state.currentUser\r\n      .createRoom({ name })\r\n      .then(room => {\r\n        console.log('add room', room, room.id)\r\n        this.subscribeUserToRoom(this.state.currentUser, room.id)\r\n        this.fetchMessagesForCurrentRoom(room)\r\n        this.setState({ currentRoom: room })\r\n      })\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  addMemberToRoom = member => {\r\n    const { currentUser, currentRoom } = this.state\r\n    currentUser\r\n      .addUserToRoom({\r\n        userId: member,\r\n        roomId: currentRoom.id\r\n      })\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  setCurrentRoom = roomId => {\r\n    const { currentUser } = this.state\r\n    const room = currentUser.rooms.find(room => room.id === roomId)\r\n    this.setState({\r\n      currentRoom: room,\r\n      usersWhoAreTyping: []\r\n    })\r\n    this.fetchMessagesForCurrentRoom(room)\r\n  }\r\n\r\n  fetchMessagesForCurrentRoom = room => {\r\n    return this.state.currentUser\r\n      .fetchMessages({\r\n        roomId: room.id,\r\n        limit: 30\r\n      })\r\n      .then(messages => this.setState({ messages }))\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  toggleDialog = (name = '') => {\r\n    this.setState(prevState => ({\r\n      isDialogActive: !prevState.isDialogActive,\r\n      dialogName: name\r\n    }))\r\n  }\r\n\r\n  toggleSettings = () => {\r\n    this.setState(prevState => ({\r\n      isSettingActive: !prevState.isSettingActive\r\n    }))\r\n  }\r\n\r\n  setTheme = theme => {\r\n    if (theme !== this.state.currentTheme) {\r\n      this.setState({ currentTheme: theme })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      messages,\r\n      currentUser,\r\n      currentRoom,\r\n      isDialogActive,\r\n      dialogName,\r\n      usersWhoAreTyping,\r\n      isSettingActive,\r\n      currentTheme\r\n    } = this.state\r\n\r\n    const theme =\r\n      currentTheme !== 'dark'\r\n        ? currentTheme === 'blue'\r\n          ? THEME.LIGHT_BLUE_THEME\r\n          : THEME.LIGHT_RED_THEME\r\n        : THEME.DARK_THEME\r\n\r\n    const onSubmit = dialogName === 'room' ? this.addRoom : this.addMemberToRoom\r\n    const dialog = isDialogActive ? (\r\n      <Dialog\r\n        name={dialogName}\r\n        toggleDialog={this.toggleDialog}\r\n        onSubmit={onSubmit}\r\n        theme={theme}\r\n      />\r\n    ) : null\r\n\r\n    if (isSettingActive) {\r\n      return (\r\n        <Setting\r\n          setTheme={this.setTheme}\r\n          toggleSettings={this.toggleSettings}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <>\r\n          <Header toggleSettings={this.toggleSettings} theme={theme} />\r\n          <div className='chat-screen'>\r\n            <RoomsList\r\n              rooms={currentUser.rooms}\r\n              toggleDialog={this.toggleDialog}\r\n              currentRoom={currentRoom}\r\n              setCurrentRoom={this.setCurrentRoom}\r\n              theme={theme}\r\n            />\r\n\r\n            <div\r\n              className='chat'\r\n              style={{ background: theme.secondaryBackground }}\r\n            >\r\n              <Messagelist messages={messages} theme={theme} />\r\n              <div className='chat-form'>\r\n                <TypingIndicator usersWhoAreTyping={usersWhoAreTyping} />\r\n                <SendMessageForm\r\n                  onSubmit={this.sendMessage}\r\n                  onChange={this.sendTypingEvent}\r\n                  theme={theme}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <MembersList\r\n              members={currentRoom.users}\r\n              toggleDialog={this.toggleDialog}\r\n              theme={theme}\r\n            />\r\n          </div>\r\n          {dialog}\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport UserLogin from '../views/UserLogin'\r\nimport ChatScreen from '../views/ChatScreen'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentUsername: '',\r\n    currentScreen: 'LoginScreen'\r\n  }\r\n\r\n  onUsernameSubmit = username => {\r\n    fetch(`${process.env.REACT_APP_SERVER_URI}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username })\r\n    })\r\n      .then(response =>\r\n        this.setState({\r\n          currentUsername: username,\r\n          currentScreen: 'ChatScreen'\r\n        })\r\n      )\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='app'>\r\n        {this.state.currentScreen === 'ChatScreen' ? (\r\n          <ChatScreen currentUsername={this.state.currentUsername} />\r\n        ) : (\r\n          <UserLogin onSubmit={this.onUsernameSubmit} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}