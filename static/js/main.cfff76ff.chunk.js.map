{"version":3,"sources":["store/actions/userActions.js","store/actions/actionTypes.js","store/actions/errorActions.js","store/actions/chatkitActions.js","components/ErrorNotification/index.jsx","utils/theme.js","store/Store.jsx","views/UserLogin/index.jsx","components/Header/index.jsx","components/RoomsList/Room.jsx","components/Scrollbar/index.jsx","components/RoomsList/index.jsx","components/MembersList/Member.jsx","components/MembersList/index.jsx","components/MessageList/Message.jsx","components/MessageList/index.jsx","components/TypingIndicator/index.jsx","components/SendMessageForm/index.jsx","views/Home/ChatScreen.jsx","components/Dialog/index.jsx","components/Setting/ThemeHandler.jsx","components/Setting/index.jsx","store/actions/themeActions.js","views/Home/index.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["loginSuccess","username","type","onUsernameSubmit","dispatch","a","URL","process","fetch","method","headers","body","JSON","stringify","setCurrentRoom","room","currentRoom","addToCurrentUsersTyping","user","removeFromCurrentUsersTyping","addMessage","message","connectToChatkit","chatManager","connect","onAddedToRoom","onUserStartedTyping","userTyping","name","roomId","id","onUserStoppedTyping","currentUser","userRooms","roomStore","rooms","Object","keys","length","currentRoomId","subscribeUserToRoom","subscribeToRoomMultipart","messageLimit","hooks","onMessage","onPresenceChanged","onUserJoined","handleCurrentRoom","find","sendMessage","sendSimpleMessage","text","sendTypingEvent","hasOwnProperty","isTypingIn","addRoom","roomName","createRoom","addMemberToRoom","member","addUserToRoom","userId","ErrorNotification","theme","props","errorStyles","background","primaryBackground","color","fontPrimary","useEffect","setTimeout","clearError","clearTimeout","className","style","DARK_THEME","secondaryBackground","tertiaryBackground","fontSecondary","memberOnline","memberOffline","BLUE_THEME","RED_THEME","initialState","isAuth","messages","currentUsersTyping","forceUpdateCount","themes","isError","Store","createContext","reducer","state","action","filter","UserLogin","useContext","useState","setName","errorNotification","onSubmit","e","preventDefault","trim","placeholder","onChange","target","value","Header","headerStyles","onClick","handleSettings","Radium","isCurrentRoom","styles","roomStyles","hoverColor","currentRoomStyles","selectionColor","roomStyle","Scrollbar","renderThumb","thumbStyle","backgroundColor","thumbColor","borderRadius","marginRight","renderThumbVertical","this","autoHide","autoHideTimeout","autoHideDuration","children","Component","RoomsList","listStyles","buttonStyles","values","map","key","renderRooms","handleDialog","Member","memberName","memberPresence","presenceStyle","memberOnlineColor","memberOfflineColor","MembersList","members","presence","renderMembers","Message","messageSender","messageText","senderStyle","messageStyle","MessageList","messageEndRef","useRef","current","scrollIntoView","behavior","senderId","parts","payload","content","ref","TypingIndicator","usersTyping","indicator","SendMessageForm","setMessage","inputStyles","handleMessageForm","handleTypingIndicator","ChatScreen","dialog","users","Dialog","dialogStyles","dialogInput","setDialogInput","ThemeHandler","handleTheme","currentTheme","fontStyles","changeTheme","onChangeTheme","logoutUser","Home","isDialogActive","toggleDialog","activeDialog","setDialog","isSettingActive","toggleSettingPane","Chatkit","ChatManager","instanceLocator","tokenProvider","TokenProvider","url","renderScreen","onDialogSubmit","App","Boolean","window","location","hostname","match","app","useReducer","Provider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfff76ff.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes'\r\nimport { setError, setClearError } from './errorActions'\r\n\r\nconst loginSuccess = username => ({\r\n  type: actionTypes.LOGIN_SUCCESS,\r\n  username,\r\n})\r\n\r\nconst logoutSuccess = () => ({\r\n  type: actionTypes.LOGOUT_SUCCESS,\r\n})\r\n\r\nexport const onUsernameSubmit = async (username, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n\r\n    const URL = `${process.env.REACT_APP_SERVER_URI}/users`\r\n    await fetch(URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username }),\r\n    })\r\n    await dispatch(loginSuccess(username))\r\n  } catch {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nexport const logoutUser = dispatch => {\r\n  dispatch(logoutSuccess())\r\n}\r\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\r\n\r\nexport const SET_CURRENT_ROOM = 'SET_CURRENT_ROOM'\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\r\n\r\nexport const ADD_MESSAGE = 'ADD_MESSAGE'\r\nexport const SET_CLEAR_MESSAGES = 'SET_CLEAR_MESSAGES'\r\n\r\nexport const ADD_TO_CURRENT_USERS_TYPING = 'ADD_TO_CURRENT_USERS_TYPING'\r\nexport const REMOVE_FROM_CURRENT_USERS_TYPING =\r\n  'REMOVE_FROM_CURRENT_USERS_TYPING'\r\nexport const SET_CLEAR_CURRENT_USERS_TYPING = 'SET_CLEAR_CURRENT_USERS_TYPING'\r\n\r\nexport const CHANGE_THEME = 'CHANGE_THEME'\r\n\r\nexport const FORCE_UPDATE = 'FORCE_UPDATE'\r\n\r\nexport const SET_ERROR = 'SET_ERROR'\r\nexport const SET_CLEAR_ERROR = 'SET_CLEAR_ERROR'\r\n","import * as actionTypes from './actionTypes'\r\n\r\nexport const setError = () => ({\r\n  type: actionTypes.SET_ERROR,\r\n})\r\n\r\nexport const setClearError = () => ({\r\n  type: actionTypes.SET_CLEAR_ERROR,\r\n})\r\n\r\nexport const clearError = dispatch => {\r\n  dispatch(setClearError())\r\n}\r\n","import * as actionTypes from './actionTypes'\r\nimport { setError, setClearError } from './errorActions'\r\n\r\nconst setCurrentUser = user => ({\r\n  type: actionTypes.SET_CURRENT_USER,\r\n  currentUser: user,\r\n})\r\n\r\nconst setCurrentRoom = room => ({\r\n  type: actionTypes.SET_CURRENT_ROOM,\r\n  currentRoom: room,\r\n})\r\n\r\nconst addToCurrentUsersTyping = user => ({\r\n  type: actionTypes.ADD_TO_CURRENT_USERS_TYPING,\r\n  user,\r\n})\r\n\r\nconst removeFromCurrentUsersTyping = user => ({\r\n  type: actionTypes.REMOVE_FROM_CURRENT_USERS_TYPING,\r\n  user,\r\n})\r\n\r\nconst setClearCurrentUsersTyping = () => ({\r\n  type: actionTypes.SET_CLEAR_CURRENT_USERS_TYPING,\r\n})\r\n\r\nconst addMessage = message => ({\r\n  type: actionTypes.ADD_MESSAGE,\r\n  message,\r\n})\r\n\r\nconst setClearMessages = () => ({\r\n  type: actionTypes.SET_CLEAR_MESSAGES,\r\n})\r\n\r\nconst forceUpdate = () => ({\r\n  type: actionTypes.FORCE_UPDATE,\r\n})\r\n\r\nexport const connectToChatkit = async (chatManager, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    const currentUser = await chatManager.connect({\r\n      onAddedToRoom: () => dispatch(forceUpdate()),\r\n      onUserStartedTyping: (room, user) => {\r\n        const userTyping = {\r\n          name: user.name,\r\n          roomId: room.id,\r\n        }\r\n        dispatch(addToCurrentUsersTyping(userTyping))\r\n      },\r\n      onUserStoppedTyping: (room, user) => {\r\n        const userTyping = {\r\n          name: user.name,\r\n          roomId: room.id,\r\n        }\r\n        dispatch(removeFromCurrentUsersTyping(userTyping))\r\n      },\r\n    })\r\n\r\n    await dispatch(setCurrentUser(currentUser))\r\n\r\n    const userRooms = currentUser.roomStore.rooms\r\n    const currentRoomId =\r\n      (await Object.keys(userRooms).length) > 0\r\n        ? Object.keys(userRooms)[0]\r\n        : process.env.REACT_APP_GENERAL_ROOM_ID\r\n\r\n    await subscribeUserToRoom(currentUser, currentRoomId, dispatch)\r\n\r\n    const currentRoom = await currentUser.roomStore.rooms[\r\n      Object.keys(currentUser.roomStore.rooms)[0]\r\n    ]\r\n\r\n    await dispatch(setCurrentRoom(currentRoom))\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nconst subscribeUserToRoom = async (user, roomId, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    await dispatch(setClearMessages())\r\n    await user.subscribeToRoomMultipart({\r\n      roomId,\r\n      messageLimit: 30,\r\n      hooks: {\r\n        onMessage: message => dispatch(addMessage(message)),\r\n        onPresenceChanged: () => dispatch(forceUpdate()),\r\n        onUserJoined: () => dispatch(forceUpdate()),\r\n      },\r\n    })\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nexport const handleCurrentRoom = async (user, roomId, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    const userRooms = user.roomStore.rooms\r\n    const currentRoom =\r\n      userRooms[Object.keys(userRooms).find(id => id === roomId)]\r\n    await dispatch(setClearCurrentUsersTyping())\r\n    await subscribeUserToRoom(user, roomId, dispatch)\r\n    await dispatch(setCurrentRoom(currentRoom))\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nexport const sendMessage = async (user, room, message, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    await user.sendSimpleMessage({\r\n      text: message,\r\n      roomId: room.id,\r\n    })\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nexport const sendTypingEvent = async (user, roomId) => {\r\n  if (user.hasOwnProperty('isTypingIn')) {\r\n    await user.isTypingIn({ roomId })\r\n  }\r\n}\r\n\r\nexport const addRoom = async (user, roomName, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    const room = await user.createRoom({ name: roomName })\r\n    await subscribeUserToRoom(user, room.id, dispatch)\r\n    await dispatch(setClearCurrentUsersTyping())\r\n    await dispatch(setCurrentRoom(room))\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n\r\nexport const addMemberToRoom = async (user, room, member, dispatch) => {\r\n  try {\r\n    await dispatch(setClearError())\r\n    await user.addUserToRoom({\r\n      userId: member,\r\n      roomId: room.id,\r\n    })\r\n  } catch (err) {\r\n    await dispatch(setError())\r\n  }\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { clearError } from '../../store/actions'\r\nimport './styles.css'\r\n\r\nconst ErrorNotification = ({ theme, ...props }) => {\r\n  const errorStyles = {\r\n    background: theme.primaryBackground,\r\n    color: theme.fontPrimary,\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      clearError(props.dispatch)\r\n    }, 1600)\r\n    return () => clearTimeout()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"error\" style={errorStyles}>\r\n      Something went wrong!! Try Again\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","const DARK_THEME = {\r\n  primaryBackground: '#181b1f',\r\n  secondaryBackground: '#2c2f33',\r\n  tertiaryBackground: '#21252b',\r\n  fontPrimary: '#fff',\r\n  fontSecondary: '#adadad',\r\n  memberOnline: '#2e2',\r\n  memberOffline: '#2e2e2e',\r\n}\r\n\r\nconst BLUE_THEME = {\r\n  primaryBackground: '#80b7f5',\r\n  secondaryBackground: '#fafafa',\r\n  tertiaryBackground: '#ececec',\r\n  fontPrimary: '#000',\r\n  fontSecondary: '#30373f',\r\n  memberOnline: '#227093',\r\n  memberOffline: '#d2dae2',\r\n}\r\n\r\nconst RED_THEME = {\r\n  primaryBackground: '#ff7979',\r\n  secondaryBackground: '#fafafa',\r\n  tertiaryBackground: '#ececec',\r\n  fontPrimary: '#000',\r\n  fontSecondary: '#30373f',\r\n  memberOnline: '#b33939',\r\n  memberOffline: '#d2dae2',\r\n}\r\n\r\nexport { DARK_THEME, BLUE_THEME, RED_THEME }\r\n","import React, { createContext, useReducer } from 'react'\r\nimport * as actionTypes from './actions/actionTypes'\r\nimport * as themes from '../utils/theme'\r\n\r\nconst initialState = {\r\n  isAuth: false,\r\n  userId: '',\r\n  currentUser: {},\r\n  currentRoom: {},\r\n  messages: [],\r\n  currentUsersTyping: [],\r\n  forceUpdateCount: 0,\r\n  theme: themes.BLUE_THEME,\r\n  isError: false,\r\n}\r\n\r\nexport const Store = createContext(initialState)\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN_SUCCESS:\r\n      return { ...state, isAuth: true, userId: action.username }\r\n\r\n    case actionTypes.LOGOUT_SUCCESS:\r\n      return initialState\r\n\r\n    case actionTypes.SET_CURRENT_USER:\r\n      return { ...state, currentUser: action.currentUser }\r\n\r\n    case actionTypes.SET_CURRENT_ROOM:\r\n      return { ...state, currentRoom: action.currentRoom }\r\n\r\n    case actionTypes.SET_CLEAR_MESSAGES:\r\n      return { ...state, messages: [] }\r\n\r\n    case actionTypes.ADD_MESSAGE:\r\n      return { ...state, messages: [...state.messages, action.message] }\r\n\r\n    case actionTypes.SET_CLEAR_CURRENT_USERS_TYPING:\r\n      return { ...state, currentUsersTyping: [] }\r\n\r\n    case actionTypes.ADD_TO_CURRENT_USERS_TYPING:\r\n      return {\r\n        ...state,\r\n        currentUsersTyping: [...state.currentUsersTyping, action.user],\r\n      }\r\n\r\n    case actionTypes.REMOVE_FROM_CURRENT_USERS_TYPING:\r\n      return {\r\n        ...state,\r\n        currentUsersTyping: state.currentUsersTyping.filter(\r\n          user => user.name !== action.user.name\r\n        ),\r\n      }\r\n\r\n    case actionTypes.CHANGE_THEME:\r\n      return { ...state, theme: action.theme }\r\n\r\n    case actionTypes.SET_ERROR:\r\n      return { ...state, isError: true }\r\n\r\n    case actionTypes.SET_CLEAR_ERROR:\r\n      return { ...state, isError: false }\r\n\r\n    case actionTypes.FORCE_UPDATE:\r\n      return { ...state, forceUpdateCount: state.forceUpdateCount + 1 }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  return <Store.Provider value={{ state, dispatch }}>{children}</Store.Provider>\r\n}\r\n","import React, { useState, useContext } from 'react'\r\n\r\nimport ErrorNotification from '../../components/ErrorNotification'\r\nimport { Store } from '../../store/Store'\r\nimport { onUsernameSubmit } from '../../store/actions'\r\nimport './styles.css'\r\n\r\nconst UserLogin = () => {\r\n  const { state, dispatch } = useContext(Store)\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    name.trim().length > 0 && onUsernameSubmit(name, dispatch)\r\n  }\r\n\r\n  const errorNotification = state.isError && (\r\n    <ErrorNotification theme={state.theme} dispatch={dispatch} />\r\n  )\r\n\r\n  return (\r\n    <div className=\"user-login\">\r\n      <form onSubmit={handleSubmit} className=\"login-form\">\r\n        <h1 className=\"header\">Login</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"What's your name??\"\r\n          onChange={e => setName(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <input type=\"submit\" className=\"input button\" value=\"Login\" />\r\n      </form>\r\n      {errorNotification}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserLogin\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './styles.css'\r\n\r\nconst Header = ({ theme, ...props }) => {\r\n  const headerStyles = {\r\n    background: theme.primaryBackground,\r\n    color: theme.fontPrimary,\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-header\" style={headerStyles}>\r\n      <div className=\"app-name\">#react-CHAT</div>\r\n      <button\r\n        className=\"settings-header\"\r\n        style={{ color: theme.fontPrimary }}\r\n        onClick={props.handleSettings}\r\n      >\r\n        settings\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n  handleSettings: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Radium from 'radium'\r\n\r\nconst Room = ({ roomName, isCurrentRoom, ...props }) => {\r\n  const styles = {\r\n    roomStyles: {\r\n      ':hover': {\r\n        background: props.hoverColor,\r\n      },\r\n    },\r\n    currentRoomStyles: {\r\n      background: props.selectionColor,\r\n    },\r\n  }\r\n\r\n  const roomStyle = isCurrentRoom\r\n    ? { ...styles.roomStyles, ...styles.currentRoomStyles }\r\n    : styles.roomStyles\r\n\r\n  return (\r\n    <li className=\"list-item\" style={roomStyle} onClick={props.setCurrentRoom}>\r\n      {roomName}\r\n    </li>\r\n  )\r\n}\r\n\r\nRoom.propTypes = {\r\n  roomName: PropTypes.string,\r\n  isCurrentRoom: PropTypes.bool.isRequired,\r\n  selectionColor: PropTypes.string.isRequired,\r\n  hoverColor: PropTypes.string.isRequired,\r\n  setCurrentRoom: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Radium(Room)\r\n","import React, { Component } from 'react'\r\nimport Scrollbars from 'react-custom-scrollbars'\r\n\r\nexport default class Scrollbar extends Component {\r\n  renderThumb = ({ style }) => {\r\n    const thumbStyle = {\r\n      backgroundColor: this.props.thumbColor,\r\n      borderRadius: '5px',\r\n      marginRight: '5px'\r\n    }\r\n    return <div style={{ ...style, ...thumbStyle }} />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Scrollbars\r\n        renderThumbVertical={this.renderThumb}\r\n        autoHide={this.props.autoHide}\r\n        autoHideTimeout={1000}\r\n        autoHideDuration={400}\r\n      >\r\n        {this.props.children}\r\n      </Scrollbars>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { handleCurrentRoom } from '../../store/actions'\r\nimport Room from './Room'\r\nimport Scrollbar from '../Scrollbar'\r\n\r\nconst RoomsList = ({ currentUser, currentRoom, theme, ...props }) => {\r\n  const styles = {\r\n    listStyles: {\r\n      background: theme.primaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n    buttonStyles: {\r\n      background: theme.secondaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n  }\r\n\r\n  const renderRooms = () => {\r\n    if (currentUser.hasOwnProperty('roomStore')) {\r\n      return Object.values(currentUser.roomStore.rooms).map(room => (\r\n        <Room\r\n          key={room.id}\r\n          roomName={room.name}\r\n          isCurrentRoom={currentRoom.id === room.id}\r\n          setCurrentRoom={() => {\r\n            currentRoom.id !== room.id &&\r\n              handleCurrentRoom(currentUser, room.id, props.dispatch)\r\n          }}\r\n          selectionColor={theme.secondaryBackground}\r\n          hoverColor={theme.tertiaryBackground}\r\n        />\r\n      ))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"column\" style={styles.listStyles}>\r\n      <div className=\"list-header\">Your Rooms</div>\r\n      <ul className=\"list\">\r\n        <Scrollbar thumbColor={theme.secondaryBackground} autoHide>\r\n          {renderRooms()}\r\n        </Scrollbar>\r\n      </ul>\r\n      <button\r\n        className=\"add-btn\"\r\n        style={styles.buttonStyles}\r\n        onClick={() => props.handleDialog('room')}\r\n      >\r\n        create Room\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nRoomsList.propTypes = {\r\n  currentUser: PropTypes.object.isRequired,\r\n  currentRoom: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  handleDialog: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default RoomsList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Member = ({ memberName, memberPresence, ...props }) => {\r\n  const presenceStyle =\r\n    memberPresence.state === 'online'\r\n      ? { background: props.memberOnlineColor }\r\n      : { background: props.memberOfflineColor }\r\n\r\n  return (\r\n    <li className=\"list-item\">\r\n      <span className=\"presence\" style={presenceStyle} />\r\n      {memberName}\r\n    </li>\r\n  )\r\n}\r\n\r\nMember.propTypes = {\r\n  memberName: PropTypes.string.isRequired,\r\n  memberPresence: PropTypes.object.isRequired,\r\n  memberOfflineColor: PropTypes.string.isRequired,\r\n  memberOnlineColor: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Member\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Member from './Member'\r\nimport Scrollbar from '../Scrollbar'\r\n\r\nconst MembersList = ({ members, theme, ...props }) => {\r\n  const styles = {\r\n    listStyles: {\r\n      background: theme.primaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n    buttonStyles: {\r\n      background: theme.secondaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n  }\r\n\r\n  const renderMembers = () => {\r\n    if (members) {\r\n      return members.map(member => {\r\n        return (\r\n          <Member\r\n            key={member.id}\r\n            memberName={member.name}\r\n            memberPresence={member.presence}\r\n            memberOfflineColor={theme.memberOffline}\r\n            memberOnlineColor={theme.memberOnline}\r\n          />\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"column\" style={styles.listStyles}>\r\n      <div className=\"list-header\">Members list</div>\r\n      <ul className=\"list\">\r\n        <Scrollbar thumbColor={theme.secondaryBackground} autoHide>\r\n          {renderMembers()}\r\n        </Scrollbar>\r\n      </ul>\r\n      <button\r\n        className=\"add-btn\"\r\n        style={styles.buttonStyles}\r\n        onClick={() => props.handleDialog('member to room')}\r\n      >\r\n        Add\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nMembersList.propTypes = {\r\n  members: PropTypes.array,\r\n  theme: PropTypes.object.isRequired,\r\n  toggleDialog: PropTypes.func,\r\n}\r\n\r\nexport default MembersList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Message = ({ messageSender, messageText, ...props }) => (\r\n  <li className=\"message\">\r\n    <span className=\"message-sender\" style={{ color: props.senderStyle }}>\r\n      {messageSender}\r\n    </span>\r\n    <p className=\"message-text\" style={{ color: props.messageStyle }}>\r\n      {messageText}\r\n    </p>\r\n  </li>\r\n)\r\n\r\nMessage.propTypes = {\r\n  messageSender: PropTypes.string,\r\n  messageText: PropTypes.string,\r\n}\r\n\r\nexport default Message\r\n","import React, { useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Message from './Message'\r\nimport Scrollbar from '../Scrollbar'\r\nimport './styles.css'\r\n\r\nconst MessageList = ({ messages, theme }) => {\r\n  let messageEndRef = useRef(null)\r\n\r\n  const scrollToBottom = () => {\r\n    messageEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  useEffect(scrollToBottom, [messages])\r\n\r\n  const renderMessages = () => {\r\n    return messages.map(message => (\r\n      <Message\r\n        key={message.id}\r\n        messageSender={message.senderId}\r\n        messageText={message.parts[0].payload.content}\r\n        senderStyle={theme.fontSecondary}\r\n        messageStyle={theme.fontPrimary}\r\n      />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <ul className=\"message-list\">\r\n      <Scrollbar thumbColor={theme.primaryBackground}>\r\n        {renderMessages()}\r\n        <div ref={messageEndRef} />\r\n      </Scrollbar>\r\n    </ul>\r\n  )\r\n}\r\n\r\nMessageList.propTypes = {\r\n  messages: PropTypes.array.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default MessageList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TypingIndicator = ({ currentUsersTyping, currentRoomId, color }) => {\r\n  const usersTyping = currentUsersTyping.filter(\r\n    user => user.roomId === currentRoomId\r\n  )\r\n\r\n  const indicator =\r\n    usersTyping.length > 0\r\n      ? usersTyping.length > 1\r\n        ? `${usersTyping[0].name} and ${usersTyping[1].name},... are typing`\r\n        : `${usersTyping[0].name} is typing`\r\n      : null\r\n\r\n  return (\r\n    <p className=\"typing-indicator\" style={{ color }}>\r\n      {indicator}\r\n    </p>\r\n  )\r\n}\r\n\r\nTypingIndicator.propTypes = {\r\n  currentUsersTyping: PropTypes.array.isRequired,\r\n  currentRoomId: PropTypes.string,\r\n  color: PropTypes.string,\r\n}\r\n\r\nexport default TypingIndicator\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\nconst SendMessageForm = ({ theme, ...props }) => {\r\n  const [message, setMessage] = useState('')\r\n\r\n  const styles = {\r\n    inputStyles: {\r\n      background: theme.tertiaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n    buttonStyles: {\r\n      background: theme.primaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n  }\r\n\r\n  const handleChange = e => {\r\n    props.handleTypingIndicator()\r\n\r\n    setMessage(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    props.handleMessageForm(message)\r\n    setMessage('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"message-form\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter message to send..\"\r\n        onChange={handleChange}\r\n        value={message}\r\n        className=\"message-input\"\r\n        style={styles.inputStyles}\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n        className=\"message-send button\"\r\n        style={styles.buttonStyles}\r\n        value=\"send..\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nSendMessageForm.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n  handleMessageForm: PropTypes.func.isRequired,\r\n  handleTypingIndicator: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SendMessageForm\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Header from '../../components/Header'\r\nimport RoomsList from '../../components/RoomsList'\r\nimport MembersList from '../../components/MembersList'\r\nimport Messagelist from '../../components/MessageList'\r\nimport TypingIndicator from '../../components/TypingIndicator'\r\nimport SendMessageForm from '../../components/SendMessageForm'\r\n\r\nconst ChatScreen = props => {\r\n  const {\r\n    currentUser,\r\n    currentRoom,\r\n    messages,\r\n    currentUsersTyping,\r\n    dialog,\r\n    theme,\r\n  } = props\r\n\r\n  return (\r\n    <>\r\n      <Header theme={theme} handleSettings={props.handleSettings} />\r\n      <div className=\"chat-screen\">\r\n        <RoomsList\r\n          handleDialog={props.handleDialog}\r\n          theme={theme}\r\n          currentUser={currentUser}\r\n          currentRoom={currentRoom}\r\n          dispatch={props.dispatch}\r\n        />\r\n\r\n        <div className=\"chat\" style={{ background: theme.secondaryBackground }}>\r\n          <Messagelist messages={messages} theme={theme} />\r\n          <div className=\"chat-form\">\r\n            <TypingIndicator\r\n              currentUsersTyping={currentUsersTyping}\r\n              currentRoomId={currentRoom.id}\r\n              color={theme.fontSecondary}\r\n            />\r\n            <SendMessageForm\r\n              theme={theme}\r\n              handleTypingIndicator={props.handleTypingIndicator}\r\n              handleMessageForm={props.handleMessageForm}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <MembersList\r\n          handleDialog={props.handleDialog}\r\n          theme={theme}\r\n          members={currentRoom.users}\r\n        />\r\n      </div>\r\n      {dialog}\r\n    </>\r\n  )\r\n}\r\n\r\nChatScreen.propTypes = {\r\n  currentUser: PropTypes.object,\r\n  currentRoom: PropTypes.object,\r\n  messages: PropTypes.array,\r\n  currentUsersTyping: PropTypes.array,\r\n  dialog: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  theme: PropTypes.object.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n  handleSettings: PropTypes.func.isRequired,\r\n  handleDialog: PropTypes.func.isRequired,\r\n  handleMessageForm: PropTypes.func.isRequired,\r\n  handleTypingIndicator: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatScreen\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './styles.css'\r\n\r\nconst Dialog = ({ name, theme, ...props }) => {\r\n  const styles = {\r\n    dialogStyles: {\r\n      background: theme.secondaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n    inputStyles: {\r\n      background: theme.tertiaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n    buttonStyles: {\r\n      background: theme.primaryBackground,\r\n      color: theme.fontPrimary,\r\n    },\r\n  }\r\n\r\n  const [dialogInput, setDialogInput] = useState('')\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (dialogInput.trim().length > 0) {\r\n      props.onSubmit(dialogInput)\r\n      props.handleDialog()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"dialog-form\"\r\n        style={styles.dialogStyles}\r\n      >\r\n        <button onClick={props.handleDialog} className=\"cancel\">\r\n          x\r\n        </button>\r\n        <h1 className=\"header\">{`Add new ${name}`}</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type here..\"\r\n          value={dialogInput}\r\n          onChange={e => setDialogInput(e.target.value)}\r\n          className=\"input\"\r\n          style={styles.inputStyles}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"input button\"\r\n          style={styles.buttonStyles}\r\n          value=\"Add\"\r\n        />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nDialog.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  handleDialog: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Dialog\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport * as themes from '../../utils/theme'\r\n\r\nconst ThemeHandler = props => (\r\n  <div className=\"settings-themes\">\r\n    <h2 className=\"header-secondary\" style={props.style}>\r\n      Select a theme\r\n    </h2>\r\n    <div className=\"themes\">\r\n      <div\r\n        className=\"theme-box dark\"\r\n        onClick={() => props.handleTheme(themes.DARK_THEME)}\r\n      />\r\n      <div\r\n        className=\"theme-box blue\"\r\n        onClick={() => props.handleTheme(themes.BLUE_THEME)}\r\n      />\r\n      <div\r\n        className=\"theme-box red\"\r\n        onClick={() => props.handleTheme(themes.RED_THEME)}\r\n      />\r\n    </div>\r\n  </div>\r\n)\r\n\r\nThemeHandler.propTypes = {\r\n  handleTheme: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ThemeHandler\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Radium from 'radium'\r\n\r\nimport { onChangeTheme, logoutUser } from '../../store/actions'\r\n\r\nimport './styles.css'\r\nimport ThemeHandler from './ThemeHandler'\r\n\r\nconst Setting = ({ currentTheme, ...props }) => {\r\n  const handleTheme = theme => {\r\n    onChangeTheme(currentTheme, theme, props.dispatch)\r\n  }\r\n\r\n  const fontStyles = {\r\n    color: currentTheme.fontPrimary,\r\n  }\r\n\r\n  const buttonStyles = {\r\n    background: currentTheme.secondaryBackground,\r\n    color: currentTheme.fontPrimary,\r\n    ':hover': {\r\n      background: currentTheme.primaryBackground,\r\n    },\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"settings\"\r\n      style={{ background: currentTheme.secondaryBackground }}\r\n    >\r\n      <div className=\"cancel\" onClick={props.handleSettings}>\r\n        x\r\n      </div>\r\n      <div className=\"settings-content\">\r\n        <h2 className=\"header-primary\" style={fontStyles}>\r\n          Settings\r\n        </h2>\r\n        <div className=\"break\" />\r\n        <ThemeHandler handleTheme={handleTheme} style={fontStyles} />\r\n        <button\r\n          className=\"logout-btn\"\r\n          style={buttonStyles}\r\n          onClick={() => logoutUser(props.dispatch)}\r\n        >\r\n          Logout\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nSetting.propTypes = {\r\n  currentTheme: PropTypes.object.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Radium(Setting)\r\n","import * as actionTypes from './actionTypes'\r\n\r\nconst changeTheme = theme => ({\r\n  type: actionTypes.CHANGE_THEME,\r\n  theme,\r\n})\r\n\r\nexport const onChangeTheme = (currentTheme, theme, dispatch) => {\r\n  if (theme !== currentTheme) {\r\n    dispatch(changeTheme(theme))\r\n  }\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react'\r\nimport Chatkit from '@pusher/chatkit-client'\r\n\r\nimport ChatScreen from './ChatScreen'\r\nimport Dialog from '../../components/Dialog'\r\nimport Setting from '../../components/Setting'\r\nimport './styles.css'\r\n\r\nimport { Store } from '../../store/Store'\r\nimport {\r\n  connectToChatkit,\r\n  addRoom,\r\n  addMemberToRoom,\r\n  sendMessage,\r\n  sendTypingEvent,\r\n} from '../../store/actions'\r\nimport ErrorNotification from '../../components/ErrorNotification'\r\n\r\nconst Home = () => {\r\n  const { state, dispatch } = useContext(Store)\r\n  const {\r\n    isAuth,\r\n    userId,\r\n    currentUser,\r\n    currentRoom,\r\n    messages,\r\n    currentUsersTyping,\r\n    theme,\r\n    isError,\r\n  } = state\r\n\r\n  const [isDialogActive, toggleDialog] = useState(false)\r\n  const [activeDialog, setDialog] = useState('')\r\n  const [isSettingActive, toggleSettingPane] = useState(false)\r\n\r\n  const chatManager = new Chatkit.ChatManager({\r\n    instanceLocator: process.env.REACT_APP_CHATKIT_INSTANCE,\r\n    userId: userId,\r\n    tokenProvider: new Chatkit.TokenProvider({\r\n      url: `${process.env.REACT_APP_SERVER_URI}/auth`,\r\n    }),\r\n  })\r\n\r\n  useEffect(() => {\r\n    isAuth && connectToChatkit(chatManager, dispatch)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const handleMessageForm = message => {\r\n    sendMessage(currentUser, currentRoom, message, dispatch)\r\n  }\r\n\r\n  const handleTypingIndicator = () => {\r\n    sendTypingEvent(currentUser, currentRoom.id)\r\n  }\r\n\r\n  const handleDialog = (name = '') => {\r\n    toggleDialog(!isDialogActive)\r\n    setDialog(name)\r\n  }\r\n\r\n  const handleRoomDialog = room => {\r\n    addRoom(currentUser, room, dispatch)\r\n  }\r\n\r\n  const handleMemberDialog = member => {\r\n    addMemberToRoom(currentUser, currentRoom, member, dispatch)\r\n  }\r\n\r\n  const onDialogSubmit =\r\n    activeDialog === 'room' ? handleRoomDialog : handleMemberDialog\r\n\r\n  const handleSettings = () => {\r\n    toggleSettingPane(!isSettingActive)\r\n  }\r\n\r\n  const errorNotification = isError && (\r\n    <ErrorNotification dispatch={dispatch} theme={theme} />\r\n  )\r\n\r\n  const dialog = isDialogActive && (\r\n    <Dialog\r\n      name={activeDialog}\r\n      theme={theme}\r\n      handleDialog={handleDialog}\r\n      onSubmit={onDialogSubmit}\r\n    />\r\n  )\r\n\r\n  let renderScreen\r\n\r\n  if (isSettingActive) {\r\n    renderScreen = (\r\n      <Setting\r\n        currentTheme={theme}\r\n        handleSettings={handleSettings}\r\n        dispatch={dispatch}\r\n      />\r\n    )\r\n  } else {\r\n    renderScreen = (\r\n      <ChatScreen\r\n        currentUser={currentUser}\r\n        currentRoom={currentRoom}\r\n        messages={messages}\r\n        currentUsersTyping={currentUsersTyping}\r\n        dialog={dialog}\r\n        dispatch={dispatch}\r\n        handleSettings={handleSettings}\r\n        handleDialog={handleDialog}\r\n        handleTypingIndicator={handleTypingIndicator}\r\n        handleMessageForm={handleMessageForm}\r\n        theme={theme}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {renderScreen}\r\n      {errorNotification}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useContext } from 'react'\r\n\r\nimport UserLogin from '../views/UserLogin'\r\nimport Home from '../views/Home'\r\n\r\nimport { Store } from '../store/Store'\r\n\r\nconst App = () => {\r\n  const { state } = useContext(Store)\r\n\r\n  return (\r\n    <div className=\"app\">{state.isAuth ? <Home /> : <UserLogin />}</div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { StoreProvider } from './store/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nconst app = (\n  <StoreProvider>\n    <App />\n  </StoreProvider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}